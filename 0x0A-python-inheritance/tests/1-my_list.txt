# Doctest for MyList class

Test normal Usage:
=================

::
	>>> MyList = __import__('1-my_list').MyList
	>>> my_list = MyList()
	>>> len(my_list)
	0
	>>> my_list
	[]
	>>> my_list.append(5)
	>>> my_list
	[5]
	>>> len(my_list)
	1
	>>> isinstance(my_list, MyList)
	True
	>>> issubclass(MyList, list)
	True
	>>> type(my_list).__name__
	'MyList'
	>>> my_list.extend([3, 9, 7])
	>>> my_list.print_sorted()
	[3, 5, 7, 9]
	>>> my_list.print_sorted(5) # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
		...
	TypeError: MyList.print_sorted() takes no ...

Test abnormal Usage:
====================

::
	>>> MyList(1)
	Traceback (most recent call last):
		...
	TypeError: 'int' object is not iterable
	>>> MyList(1, 3, 4, "name") # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
		...
	TypeError: ... expected at most 1 argument, ...

